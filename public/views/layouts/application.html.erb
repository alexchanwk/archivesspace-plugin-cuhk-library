<!DOCTYPE html>
<html lang="<%= AppConfig[:locale] %>">
<head>
	<%#mdc: new stuff, to address IE 10 and earlier issues with Bootstrap %>
	<meta charset="utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link href='<%= AppConfig[:public_proxy_url] + "/assets/favicon.ico" %>' rel="shortcut icon" type="image/x-icon" />
	<title><%=  (@page_title.blank? ? '' : "#{strip_mixed_content(@page_title)} | ") %><%= t('brand.title') %></title>
	<%= csrf_meta_tags %>
	<%# block cross-origin refer per https://go-to-hellman.blogspot.com/2015/06/protect-reader-privacy-with-referrer.html %>
	<% if AppConfig[:pui_block_referrer] %>
		<meta name="referrer" content="origin-when-cross-origin" />
	<% end %>


	<script>
	 var APP_PATH = '<%= PrefixHelper.app_prefix("") %>';
	</script>

	<%= stylesheet_link_tag    'application', media: 'all' %>
	<%= javascript_include_tag 'application' %>

        <%= render partial: 'shared/metadata' %>

	<% ASUtils.find_local_directories('public/views/layout_head.html.erb').each do |template| %>
		<% if File.exists?(template) %>
			<!-- Begin plugin layout -->
			<%= render :file => template %>
			<!-- End plugin layout -->
		<% end %>
	<% end %>

	<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
	<script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
	<script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
<![endif]-->
</head>

<% environment_label = (AppConfig.has_key?(:site_environment) && AppConfig[:site_environment]) ? AppConfig[:site_environment] : "" %>

<body class="<%= environment_label.to_s.empty? ? '' : 'show-env-label' %>">
	<% if !environment_label.to_s.empty? %>
		<div class="env-label"><%= environment_label %></div>
	<% end %>

	<% if AppConfig.has_key?(:google_tag_manager_id) && AppConfig[:google_tag_manager_id] %>
		<!-- Google Tag Manager (noscript) -->
		<noscript><iframe src='<%= "https://www.googletagmanager.com/ns.html?id=" + AppConfig[:google_tag_manager_id] %>'
		height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
		<!-- End Google Tag Manager (noscript) -->
	<% end %>

	<%= render partial: 'shared/skipnav' %>

	<div class="container-fluid no-pad">
		<%= render partial: 'shared/header' %>
		<%= render partial: 'shared/navigation' %>
	</div>

	<section id="content" class="container-fluid">
		<a name="maincontent" id="maincontent"></a>
		<%= flash_messages %>
		<%= yield %>
	</section>

	<script type="text/javascript" >
		$.fn.readmoreHTML = function(idealCharCount) {
			var idealCharCount = idealCharCount || 300;
			var counter = 0;
			var offsetMinus = 0;
			var graphs = $("p", $(this));
			var breakPoint;

			var SEE_MORE_LABEL = "<%= I18n.t('readmore.see_more') %>";
			var SEE_LESS_LABEL = "<%= I18n.t('readmore.see_less') %>";

			var $that = $(this);

			if(graphs.length < 1)
				graphs = $(this);

			$that.addClass("readmore");

			$that.on("click", "a.expander", function(e) {
				e.preventDefault();
				var $a = $(e.target).closest('a');
				var $elipses = $('.elipses', $that);

				$that.toggleClass("expanded");
				if($that.hasClass("expanded")) {
					$a.html(SEE_LESS_LABEL);
					$a.detach().appendTo($that);
					$elipses.empty();
				} else {
					$a.html(SEE_MORE_LABEL + " <i class='fa fa-chevron-right'></i>");
					$elipses.html("...");
				}
			});


			function parseGraphContent(innerHtml, result) {
				var match = innerHtml.match(/^([^<]+)</);
				if(match) {
					return parseGraphContent(innerHtml.replace(/^[^<]+</, '<'), result.concat([match[1]]));
				}

				match = innerHtml.match(/^(<(?:br|hr)\s*\/?>)(.*)/)
				if (match) {
					return parseGraphContent(match[2], result.concat([match[1]]));
				}

				match = innerHtml.match(/^(<[^>]+>[^<]+<\/[^>]+>)(.*)/)
				if(match) {
					return parseGraphContent(match[2], result.concat([match[1]]));
				}

				return result.concat([innerHtml]);
			}

			function findBreakPoint(innerHtml) {
				var niceBreakPoint;
				var offsetPlus = 0;

				if(counter + innerHtml.length < idealCharCount) {
				// no breakpoint here
				counter += innerHtml.length;
				return undefined;
				} else {
				var chunkedContent = parseGraphContent(innerHtml, []);
				_.forEach(chunkedContent, function(chunk) {
					if(chunk.match(/^</)) {
						var contentCount = chunk.replace(/^<[^>]+>/, '').replace(/<\/[^>]+>/, '').length
						offsetPlus += chunk.length - contentCount;
						counter += contentCount;
					} else if (counter + chunk.length < idealCharCount) {
						counter += chunk.length;
					} else {
						var bp = idealCharCount+offsetPlus-offsetMinus;
						niceBreakPoint = bp + innerHtml.substr(bp).split(" ")[0].length;

						//Rewind if within HTML tag
						var checkHTMLString = innerHtml.substr(0, niceBreakPoint)
						htmlNiceBreakPoint = niceBreakPoint;
						if (/<[ ]*\/[ ]*[^>]*$/.test(checkHTMLString)) // Within close tag
							htmlNiceBreakPoint = checkHTMLString.match(/<[ ]*[^\/]*>.*<[ ]*\/[^>]*$/).index;
						else if (/(<(?![ ]*\/[ ]*)[^>\/]*(>|\/[ ]*[^ ]+[ ]*>))[^<]*$/.test(innerHtml.substr(0, niceBreakPoint))) {// HTML tag not yet closed
							tag = checkHTMLString.match(/(<(?![ ]*\/[ ]*)[^>\/]*(>|\/[ ]*[^ ]+[ ]*>))[^<]*$/)[0];
							if (!/<[ ]*(area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)([ ]*|[ ]+[^>]*)>/.test(tag))
								htmlNiceBreakPoint = checkHTMLString.match(/<(<(?![ ]*\/[ ]*)[^>\/]*(>|\/[ ]*[^ ]+[ ]*>))[^<]*$/).index;
						}
						else if (/<(?!([ ]*\/[ ]*))[^>]*$/.test(innerHtml.substr(0, niceBreakPoint))) // Within open tag
							htmlNiceBreakPoint = checkHTMLString.match(/<(?!([ ]*\/[ ]*))[^>]*$/).index;

						if (htmlNiceBreakPoint > 0 && htmlNiceBreakPoint < niceBreakPoint)
							niceBreakPoint = htmlNiceBreakPoint
						// End rewind
						
						return false;
					}
				});
				}

				return niceBreakPoint;
			}


			_.forEach(graphs, function(p) {
				offsetMinus = counter+0;;
				if(_.isUndefined(breakPoint)) {
					breakPoint = findBreakPoint($(p).html());
					if(breakPoint) {
						var origHtml = $(p).html();
						$(p).html("<span class='less'>"+origHtml.substr(0, breakPoint)+"<span class='elipses'>...</span></span><span class='more'>"+origHtml.substr(breakPoint)+"</span>");
						$that.append("<a href='#' class='expander'>" + SEE_MORE_LABEL + " <i class='fa fa-chevron-right'></i></a>");
					} else {
						$(p).addClass("less");
					}
				} else {
					$(p).addClass("more");
				}
			});

			}

	</script>
	
	<script  type="text/javascript" >
		$(".upper-record-details .note-content").each(function(index, element){$(this).readmoreHTML(<%= AppConfig[:pui_readmore_max_characters] %>)});
	</script>

	<%= render partial: 'shared/footer' %>

	<% if AppConfig[:pui_enable_staff_link] %>
		<% if AppConfig.has_key?(:frontend_proxy_url) && defined?(@result) && @result.respond_to?(:uri) %>
			<script>
				FRONTEND_URL = "<%= j(AppConfig[:frontend_proxy_url]) %>";
				RECORD_URI = "<%= j(@result.uri) %>";
			</script>
		<% end %>
	<% end %>

</body>
</html>